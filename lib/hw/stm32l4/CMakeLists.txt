
if(NOT ${ARCH} STREQUAL "ARM_CM4F")
    return()
endif()

# Use the C preprocessor to generate a linker script
add_custom_command(OUTPUT "stm32l4.ld"
    COMMAND ${CMAKE_CPP} -P -CC "${CMAKE_CURRENT_SOURCE_DIR}/stm32l4.ld.in" -o "stm32l4.ld"
    WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}"
    DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/stm32l4.ld.in"
    COMMENT "Generating STM32L4 linker script"
    VERBATIM
)

# Create a custom target that generates a linker script
add_custom_target(gen_stm32l4_link_script DEPENDS "stm32l4.ld")

# Interface library specifies link-time inputs
add_library(stm32l4x6xg INTERFACE)

target_link_libraries(stm32l4x6xg INTERFACE
    cm4f_startup
    # The order of the scripts here is important
    "-T${CMAKE_CURRENT_SOURCE_DIR}/stm32l4x6xg_memory.ld"
    "-T${CMAKE_CURRENT_BINARY_DIR}/stm32l4.ld"
)

# Make sure the linker script gets generated by adding a dependency
add_dependencies(stm32l4x6xg gen_stm32l4_link_script)

# Configuration library for stm32l4_sdk_hal
add_library(config_stm32l4_sdk_hal INTERFACE)
target_sources(config_stm32l4_sdk_hal INTERFACE
    "${CMAKE_CURRENT_SOURCE_DIR}/stm32l4xx_hal_conf.h"
)

target_include_directories(config_stm32l4_sdk_hal INTERFACE
    ${CMAKE_CURRENT_SOURCE_DIR}
)

target_compile_definitions(config_stm32l4_sdk_hal INTERFACE
    "STM32L486xx=1"
)    
